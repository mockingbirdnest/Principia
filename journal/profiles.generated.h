// Warning!  This file was generated by running a program (see project |tools|).
// If you change it, the changes will be lost the next time the generator is
// run.  You should change the generator instead.

struct AdvanceTime : not_constructible {
  struct In final {
    Plugin* const plugin;
    double const t;
    double const planetarium_rotation;
  };

  using Message = serialization::AdvanceTime;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct AngularMomentumFromAngularVelocity : not_constructible {
  struct In final {
    XYZ const world_angular_velocity;
    XYZ const moments_of_inertia_in_tonnes;
    WXYZ const principal_axes_rotation;
    WXYZ const part_rotation;
  };
  using Return = XYZ;

  using Message = serialization::AngularMomentumFromAngularVelocity;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct CameraReferenceRotation : not_constructible {
  struct In final {
    Plugin* const plugin;
  };
  using Return = WXYZ;

  using Message = serialization::CameraReferenceRotation;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct CameraScale : not_constructible {
  struct In final {
    Plugin* const plugin;
  };
  using Return = double;

  using Message = serialization::CameraScale;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct CatchUpLaggingVessels : not_constructible {
  struct In final {
    Plugin* const plugin;
  };
  struct Out final {
    Iterator** const collided_vessels;
  };

  using Message = serialization::CatchUpLaggingVessels;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct CelestialFromParent : not_constructible {
  struct In final {
    Plugin const* const plugin;
    int const celestial_index;
  };
  using Return = QP;

  using Message = serialization::CelestialFromParent;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct CelestialInitialRotationInDegrees : not_constructible {
  struct In final {
    Plugin const* const plugin;
    int const celestial_index;
  };
  using Return = double;

  using Message = serialization::CelestialInitialRotationInDegrees;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct CelestialRotation : not_constructible {
  struct In final {
    Plugin const* const plugin;
    int const index;
  };
  using Return = WXYZ;

  using Message = serialization::CelestialRotation;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct CelestialRotationPeriod : not_constructible {
  struct In final {
    Plugin const* const plugin;
    int const celestial_index;
  };
  using Return = double;

  using Message = serialization::CelestialRotationPeriod;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct CelestialSphereRotation : not_constructible {
  struct In final {
    Plugin const* const plugin;
  };
  using Return = WXYZ;

  using Message = serialization::CelestialSphereRotation;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct CelestialWorldDegreesOfFreedom : not_constructible {
  struct In final {
    Plugin const* const plugin;
    int const index;
    Origin const origin;
    double const time;
  };
  using Return = QP;

  using Message = serialization::CelestialWorldDegreesOfFreedom;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct CollisionDeleteExecutor : not_constructible {
  struct In final {
    Plugin const* const plugin;
    PushPullExecutor<std::optional<DiscreteTrajectory<World>::value_type>, Length, Angle, Angle>** const executor;
  };
  struct Out final {
    PushPullExecutor<std::optional<DiscreteTrajectory<World>::value_type>, Length, Angle, Angle>** const executor;
    TQP* const collision;
  };
  using Return = bool;

  using Message = serialization::CollisionDeleteExecutor;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct CollisionGetLatitudeLongitude : not_constructible {
  struct In final {
    PushPullExecutor<std::optional<DiscreteTrajectory<World>::value_type>, Length, Angle, Angle>* const executor;
  };
  struct Out final {
    double* const latitude_in_degrees;
    double* const longitude_in_degrees;
  };
  using Return = bool;

  using Message = serialization::CollisionGetLatitudeLongitude;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct CollisionNewFlightPlanExecutor : not_constructible {
  struct In final {
    Plugin const* const plugin;
    int const celestial_index;
    XYZ const sun_world_position;
    int const max_points;
    char const* const vessel_guid;
  };
  using Return = PushPullExecutor<std::optional<DiscreteTrajectory<World>::value_type>, Length, Angle, Angle>*;

  using Message = serialization::CollisionNewFlightPlanExecutor;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct CollisionNewPredictionExecutor : not_constructible {
  struct In final {
    Plugin const* const plugin;
    int const celestial_index;
    XYZ const sun_world_position;
    int const max_points;
    char const* const vessel_guid;
  };
  using Return = PushPullExecutor<std::optional<DiscreteTrajectory<World>::value_type>, Length, Angle, Angle>*;

  using Message = serialization::CollisionNewPredictionExecutor;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct CollisionSetRadius : not_constructible {
  struct In final {
    PushPullExecutor<std::optional<DiscreteTrajectory<World>::value_type>, Length, Angle, Angle>* const executor;
    double const radius;
  };

  using Message = serialization::CollisionSetRadius;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct ClearFlags : not_constructible {
  using Message = serialization::ClearFlags;
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct ClearTargetVessel : not_constructible {
  struct In final {
    Plugin* const plugin;
  };

  using Message = serialization::ClearTargetVessel;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct ClearWorldRotationalReferenceFrame : not_constructible {
  struct In final {
    Plugin* const plugin;
  };

  using Message = serialization::ClearWorldRotationalReferenceFrame;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct CurrentTime : not_constructible {
  struct In final {
    Plugin const* const plugin;
  };
  using Return = double;

  using Message = serialization::CurrentTime;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct DeleteInterchange : not_constructible {
  struct In final {
    void const** const native_pointer;
  };
  struct Out final {
    void const** const native_pointer;
  };

  using Message = serialization::DeleteInterchange;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct DeletePlugin : not_constructible {
  struct In final {
    Plugin const** const plugin;
  };
  struct Out final {
    Plugin const** const plugin;
  };

  using Message = serialization::DeletePlugin;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct DeleteString : not_constructible {
  struct In final {
    char const** const native_string;
  };
  struct Out final {
    char const** const native_string;
  };

  using Message = serialization::DeleteString;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct DeleteU16String : not_constructible {
  struct In final {
    char16_t const** const native_string;
  };
  struct Out final {
    char16_t const** const native_string;
  };

  using Message = serialization::DeleteU16String;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct DeserializePlugin : not_constructible {
  struct In final {
    char const* const serialization;
    PushDeserializer** const deserializer;
    Plugin const** const plugin;
    char const* const compressor;
    char const* const encoder;
  };
  struct Out final {
    PushDeserializer** const deserializer;
    Plugin const** const plugin;
  };

  using Message = serialization::DeserializePlugin;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct EndInitialization : not_constructible {
  struct In final {
    Plugin* const plugin;
  };

  using Message = serialization::EndInitialization;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct EquipotentialCount : not_constructible {
  struct In final {
    Plugin* const plugin;
  };
  using Return = int;

  using Message = serialization::EquipotentialCount;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct ExternalCelestialGetPosition : not_constructible {
  struct In final {
    Plugin const* const plugin;
    int const body_index;
    double const time;
  };
  struct Out final {
    XYZ* const position;
  };
  using Return = Status*;

  using Message = serialization::ExternalCelestialGetPosition;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct ExternalCelestialGetSurfacePosition : not_constructible {
  struct In final {
    Plugin const* const plugin;
    int const body_index;
    double const planetocentric_latitude_in_degrees;
    double const planetocentric_longitude_in_degrees;
    double const radius;
    double const time;
  };
  struct Out final {
    XYZ* const position;
  };
  using Return = Status*;

  using Message = serialization::ExternalCelestialGetSurfacePosition;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct ExternalFlowFreefall : not_constructible {
  struct In final {
    Plugin const* const plugin;
    int const central_body_index;
    QP const world_body_centred_initial_degrees_of_freedom;
    double const t_initial;
    double const t_final;
  };
  struct Out final {
    QP* const world_body_centred_final_degrees_of_freedom;
  };
  using Return = Status*;

  using Message = serialization::ExternalFlowFreefall;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct ExternalGeopotentialGetCoefficient : not_constructible {
  struct In final {
    Plugin const* const plugin;
    int const body_index;
    int const degree;
    int const order;
  };
  struct Out final {
    XY* const coefficient;
  };
  using Return = Status*;

  using Message = serialization::ExternalGeopotentialGetCoefficient;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct ExternalGeopotentialGetReferenceRadius : not_constructible {
  struct In final {
    Plugin const* const plugin;
    int const body_index;
  };
  struct Out final {
    double* const reference_radius;
  };
  using Return = Status*;

  using Message = serialization::ExternalGeopotentialGetReferenceRadius;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct ExternalVesselGetPosition : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
    double const time;
  };
  struct Out final {
    XYZ* const position;
  };
  using Return = Status*;

  using Message = serialization::ExternalVesselGetPosition;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct ExternalGetNearestPlannedCoastDegreesOfFreedom : not_constructible {
  struct In final {
    Plugin const* const plugin;
    int const central_body_index;
    char const* const vessel_guid;
    int const manoeuvre_index;
    XYZ const world_body_centred_reference_position;
  };
  struct Out final {
    QP* const world_body_centred_nearest_degrees_of_freedom;
  };
  using Return = Status*;

  using Message = serialization::ExternalGetNearestPlannedCoastDegreesOfFreedom;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FlightPlanCount : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };
  using Return = int;

  using Message = serialization::FlightPlanCount;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FlightPlanCreate : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
    double const final_time;
    double const mass_in_tonnes;
  };

  using Message = serialization::FlightPlanCreate;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FlightPlanDelete : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };

  using Message = serialization::FlightPlanDelete;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FlightPlanDuplicate : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };

  using Message = serialization::FlightPlanDuplicate;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FlightPlanExists : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };
  using Return = bool;

  using Message = serialization::FlightPlanExists;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FlightPlanGetAdaptiveStepParameters : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };
  using Return = FlightPlanAdaptiveStepParameters;

  using Message = serialization::FlightPlanGetAdaptiveStepParameters;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FlightPlanGetActualFinalTime : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };
  using Return = double;

  using Message = serialization::FlightPlanGetActualFinalTime;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FlightPlanGetAnomalousStatus : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };
  using Return = Status*;

  using Message = serialization::FlightPlanGetAnomalousStatus;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FlightPlanGetCoastAnalysis : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
    int const* const revolutions_per_cycle;
    int const* const days_per_cycle;
    int const ground_track_revolution;
    int const index;
  };
  using Return = OrbitAnalysis*;

  using Message = serialization::FlightPlanGetCoastAnalysis;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FlightPlanGetDesiredFinalTime : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };
  using Return = double;

  using Message = serialization::FlightPlanGetDesiredFinalTime;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FlightPlanGetGuidance : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
    int const index;
  };
  using Return = XYZ;

  using Message = serialization::FlightPlanGetGuidance;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FlightPlanGetInitialTime : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };
  using Return = double;

  using Message = serialization::FlightPlanGetInitialTime;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FlightPlanGetManoeuvre : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
    int const index;
  };
  using Return = NavigationManoeuvre*;

  using Message = serialization::FlightPlanGetManoeuvre;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FlightPlanGetManoeuvreFrenetTrihedron : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
    int const index;
  };
  using Return = NavigationManoeuvreFrenetTrihedron;

  using Message = serialization::FlightPlanGetManoeuvreFrenetTrihedron;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FlightPlanGetManoeuvreInitialPlottedVelocity : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
    int const index;
  };
  using Return = XYZ;

  using Message = serialization::FlightPlanGetManoeuvreInitialPlottedVelocity;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FlightPlanInsert : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
    Burn const& burn;
    int const index;
  };
  using Return = Status*;

  using Message = serialization::FlightPlanInsert;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FlightPlanNumberOfAnomalousManoeuvres : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };
  using Return = int;

  using Message = serialization::FlightPlanNumberOfAnomalousManoeuvres;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FlightPlanNumberOfManoeuvres : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };
  using Return = int;

  using Message = serialization::FlightPlanNumberOfManoeuvres;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FlightPlanNumberOfSegments : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };
  using Return = int;

  using Message = serialization::FlightPlanNumberOfSegments;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FlightPlanOptimizationDriverInProgress : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };
  using Return = int;

  using Message = serialization::FlightPlanOptimizationDriverInProgress;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FlightPlanOptimizationDriverMake : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
    double const distance;
    double const* const inclination_in_degrees;
    int const celestial_index;
    NavigationFrameParameters const& navigation_frame_parameters;
  };

  using Message = serialization::FlightPlanOptimizationDriverMake;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FlightPlanOptimizationDriverStart : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
    int const manoeuvre_index;
  };

  using Message = serialization::FlightPlanOptimizationDriverStart;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FlightPlanRebase : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
    double const mass_in_tonnes;
  };
  using Return = Status*;

  using Message = serialization::FlightPlanRebase;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FlightPlanRemove : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
    int const index;
  };
  using Return = Status*;

  using Message = serialization::FlightPlanRemove;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FlightPlanRenderedApsides : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
    double const* const t_max;
    int const celestial_index;
    XYZ const sun_world_position;
    int const max_points;
  };
  struct Out final {
    Iterator** const apoapsides;
    Iterator** const periapsides;
  };

  using Message = serialization::FlightPlanRenderedApsides;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FlightPlanRenderedClosestApproaches : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
    XYZ const sun_world_position;
    int const max_points;
  };
  struct Out final {
    Iterator** const closest_approaches;
  };

  using Message = serialization::FlightPlanRenderedClosestApproaches;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FlightPlanRenderedNodes : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
    double const* const t_max;
    XYZ const sun_world_position;
    int const max_points;
  };
  struct Out final {
    Iterator** const ascending;
    Iterator** const descending;
  };

  using Message = serialization::FlightPlanRenderedNodes;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FlightPlanRenderedSegment : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
    XYZ const sun_world_position;
    int const index;
  };
  using Return = Iterator*;

  using Message = serialization::FlightPlanRenderedSegment;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FlightPlanReplace : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
    Burn const& burn;
    int const index;
  };
  using Return = Status*;

  using Message = serialization::FlightPlanReplace;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FlightPlanSelect : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
    int const index;
  };

  using Message = serialization::FlightPlanSelect;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FlightPlanSelected : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };
  using Return = int;

  using Message = serialization::FlightPlanSelected;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FlightPlanSetAdaptiveStepParameters : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
    FlightPlanAdaptiveStepParameters const flight_plan_adaptive_step_parameters;
  };
  using Return = Status*;

  using Message = serialization::FlightPlanSetAdaptiveStepParameters;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FlightPlanSetDesiredFinalTime : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
    double const final_time;
  };
  using Return = Status*;

  using Message = serialization::FlightPlanSetDesiredFinalTime;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FlightPlanUpdateFromOptimization : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };
  using Return = bool;

  using Message = serialization::FlightPlanUpdateFromOptimization;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FreeVesselsAndPartsAndCollectPileUps : not_constructible {
  struct In final {
    Plugin* const plugin;
    double const delta_t;
  };

  using Message = serialization::FreeVesselsAndPartsAndCollectPileUps;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FutureCatchUpVessel : not_constructible {
  struct In final {
    Plugin* const plugin;
    char const* const vessel_guid;
  };
  using Return = PileUpFuture*;

  using Message = serialization::FutureCatchUpVessel;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct FutureWaitForVesselToCatchUp : not_constructible {
  struct In final {
    Plugin* const plugin;
    PileUpFuture** const future;
  };
  struct Out final {
    PileUpFuture** const future;
    Iterator** const collided_vessels;
  };

  using Message = serialization::FutureWaitForVesselToCatchUp;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct GetBufferDuration : not_constructible {
  using Return = int;

  using Message = serialization::GetBufferDuration;
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct GetBufferedLogging : not_constructible {
  using Return = int;

  using Message = serialization::GetBufferedLogging;
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct GetStderrLogging : not_constructible {
  using Return = int;

  using Message = serialization::GetStderrLogging;
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct GetSuppressedLogging : not_constructible {
  using Return = int;

  using Message = serialization::GetSuppressedLogging;
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct GetVerboseLogging : not_constructible {
  using Return = int;

  using Message = serialization::GetVerboseLogging;
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct GetVersion : not_constructible {
  struct Out final {
    char const** const build_date;
    char const** const version;
  };

  using Message = serialization::GetVersion;
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct HasEncounteredApocalypse : not_constructible {
  struct In final {
    Plugin* const plugin;
  };
  struct Out final {
    char const** const details;
  };
  using Return = bool;

  using Message = serialization::HasEncounteredApocalypse;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct HasVessel : not_constructible {
  struct In final {
    Plugin* const plugin;
    char const* const vessel_guid;
  };
  using Return = bool;

  using Message = serialization::HasVessel;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct InitializeDownsamplingParameters : not_constructible {
  struct In final {
    Plugin* const plugin;
    ConfigurationDownsamplingParameters const& downsampling_parameters;
  };

  using Message = serialization::InitializeDownsamplingParameters;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct InitializeEphemerisParameters : not_constructible {
  struct In final {
    Plugin* const plugin;
    ConfigurationAccuracyParameters const& accuracy_parameters;
    ConfigurationFixedStepParameters const& fixed_step_parameters;
  };

  using Message = serialization::InitializeEphemerisParameters;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct InitializeHistoryParameters : not_constructible {
  struct In final {
    Plugin* const plugin;
    ConfigurationFixedStepParameters const& fixed_step_parameters;
  };

  using Message = serialization::InitializeHistoryParameters;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct InitializePsychohistoryParameters : not_constructible {
  struct In final {
    Plugin* const plugin;
    ConfigurationAdaptiveStepParameters const& parameters;
  };

  using Message = serialization::InitializePsychohistoryParameters;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct InsertCelestialAbsoluteCartesian : not_constructible {
  struct In final {
    Plugin* const plugin;
    int const celestial_index;
    int const* const parent_index;
    BodyParameters const& body_parameters;
    char const* const x;
    char const* const y;
    char const* const z;
    char const* const vx;
    char const* const vy;
    char const* const vz;
  };

  using Message = serialization::InsertCelestialAbsoluteCartesian;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct InsertCelestialJacobiKeplerian : not_constructible {
  struct In final {
    Plugin* const plugin;
    int const celestial_index;
    int const* const parent_index;
    BodyParameters const& body_parameters;
    KeplerianElements const* const keplerian_elements;
  };

  using Message = serialization::InsertCelestialJacobiKeplerian;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct InsertOrKeepVessel : not_constructible {
  struct In final {
    Plugin* const plugin;
    char const* const vessel_guid;
    char const* const vessel_name;
    int const parent_index;
    bool const loaded;
  };
  struct Out final {
    bool* const inserted;
  };

  using Message = serialization::InsertOrKeepVessel;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct InsertOrKeepLoadedPart : not_constructible {
  struct In final {
    Plugin* const plugin;
    uint32_t const part_id;
    char const* const name;
    double const mass_in_tonnes;
    XYZ const centre_of_mass;
    XYZ const moments_of_inertia_in_tonnes;
    WXYZ const principal_axes_rotation;
    bool const is_solid_rocket_motor;
    char const* const vessel_guid;
    int const main_body_index;
    QP const main_body_world_degrees_of_freedom;
    QP const part_world_degrees_of_freedom;
    WXYZ const part_rotation;
    XYZ const part_angular_velocity;
    double const delta_t;
  };

  using Message = serialization::InsertOrKeepLoadedPart;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct InsertUnloadedPart : not_constructible {
  struct In final {
    Plugin* const plugin;
    uint32_t const part_id;
    char const* const name;
    char const* const vessel_guid;
    QP const from_parent;
  };

  using Message = serialization::InsertUnloadedPart;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct IteratorAtEnd : not_constructible {
  struct In final {
    Iterator const* const iterator;
  };
  using Return = bool;

  using Message = serialization::IteratorAtEnd;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct IteratorDelete : not_constructible {
  struct In final {
    Iterator** const iterator;
  };
  struct Out final {
    Iterator** const iterator;
  };

  using Message = serialization::IteratorDelete;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct IteratorGetDiscreteTrajectoryQP : not_constructible {
  struct In final {
    Iterator const* const iterator;
  };
  using Return = QP;

  using Message = serialization::IteratorGetDiscreteTrajectoryQP;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct IteratorGetDiscreteTrajectoryTime : not_constructible {
  struct In final {
    Iterator const* const iterator;
  };
  using Return = double;

  using Message = serialization::IteratorGetDiscreteTrajectoryTime;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct IteratorGetDiscreteTrajectoryXYZ : not_constructible {
  struct In final {
    Iterator const* const iterator;
  };
  using Return = XYZ;

  using Message = serialization::IteratorGetDiscreteTrajectoryXYZ;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct IteratorGetNode : not_constructible {
  struct In final {
    Iterator const* const iterator;
  };
  using Return = Node;

  using Message = serialization::IteratorGetNode;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct IteratorGetRP2LinesIterator : not_constructible {
  struct In final {
    Iterator const* const iterator;
  };
  using Return = Iterator*;

  using Message = serialization::IteratorGetRP2LinesIterator;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct IteratorGetRP2LineXY : not_constructible {
  struct In final {
    Iterator const* const iterator;
  };
  using Return = XY;

  using Message = serialization::IteratorGetRP2LineXY;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct IteratorGetVesselGuid : not_constructible {
  struct In final {
    Iterator const* const iterator;
  };
  using Return = char const*;

  using Message = serialization::IteratorGetVesselGuid;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct IteratorIncrement : not_constructible {
  struct In final {
    Iterator* const iterator;
  };

  using Message = serialization::IteratorIncrement;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct IteratorReset : not_constructible {
  struct In final {
    Iterator* const iterator;
  };

  using Message = serialization::IteratorReset;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct IteratorSize : not_constructible {
  struct In final {
    Iterator const* const iterator;
  };
  using Return = int;

  using Message = serialization::IteratorSize;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct LogError : not_constructible {
  struct In final {
    char const* const file;
    int const line;
    char const* const text;
  };

  using Message = serialization::LogError;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct LogFatal : not_constructible {
  struct In final {
    char const* const file;
    int const line;
    char const* const text;
  };

  using Message = serialization::LogFatal;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct LogInfo : not_constructible {
  struct In final {
    char const* const file;
    int const line;
    char const* const text;
  };

  using Message = serialization::LogInfo;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct LogWarning : not_constructible {
  struct In final {
    char const* const file;
    int const line;
    char const* const text;
  };

  using Message = serialization::LogWarning;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct MonitorSetName : not_constructible {
  struct In final {
    int const i;
    char const* const name;
  };

  using Message = serialization::MonitorSetName;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct MonitorStart : not_constructible {
  struct In final {
    int const i;
  };

  using Message = serialization::MonitorStart;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct MonitorStop : not_constructible {
  struct In final {
    int const i;
  };

  using Message = serialization::MonitorStop;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct NavballOrientation : not_constructible {
  struct In final {
    Plugin const* const plugin;
    XYZ const sun_world_position;
    XYZ const ship_world_position;
  };
  using Return = WXYZ;

  using Message = serialization::NavballOrientation;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct NewPlugin : not_constructible {
  struct In final {
    char const* const game_epoch;
    char const* const solar_system_epoch;
    double const planetarium_rotation_in_degrees;
  };
  using Return = Plugin*;

  using Message = serialization::NewPlugin;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct PartApplyIntrinsicForce : not_constructible {
  struct In final {
    Plugin* const plugin;
    uint32_t const part_id;
    XYZ const force_in_kilonewtons;
  };

  using Message = serialization::PartApplyIntrinsicForce;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct PartApplyIntrinsicForceAtPosition : not_constructible {
  struct In final {
    Plugin* const plugin;
    uint32_t const part_id;
    XYZ const force_in_kilonewtons;
    XYZ const lever_arm;
  };

  using Message = serialization::PartApplyIntrinsicForceAtPosition;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct PartApplyIntrinsicTorque : not_constructible {
  struct In final {
    Plugin* const plugin;
    uint32_t const part_id;
    XYZ const torque_in_kilonewton_metre;
  };

  using Message = serialization::PartApplyIntrinsicTorque;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct PartGetActualRigidMotion : not_constructible {
  struct In final {
    Plugin const* const plugin;
    uint32_t const part_id;
    Origin const origin;
  };
  using Return = QPRW;

  using Message = serialization::PartGetActualRigidMotion;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct PartIsTruthful : not_constructible {
  struct In final {
    Plugin const* const plugin;
    uint32_t const part_id;
  };
  using Return = bool;

  using Message = serialization::PartIsTruthful;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct PartSetApparentRigidMotion : not_constructible {
  struct In final {
    Plugin* const plugin;
    uint32_t const part_id;
    QP const degrees_of_freedom;
    WXYZ const rotation;
    XYZ const angular_velocity;
  };

  using Message = serialization::PartSetApparentRigidMotion;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct PlanetariumCreate : not_constructible {
  struct In final {
    Plugin const* const plugin;
    XYZ const sun_world_position;
    XYZ const xyz_opengl_camera_x_in_world;
    XYZ const xyz_opengl_camera_y_in_world;
    XYZ const xyz_opengl_camera_z_in_world;
    XYZ const xyz_camera_position_in_world;
    double const focal;
    double const field_of_view;
    double const inverse_scale_factor;
    double const angular_resolution;
    XYZ const scaled_space_origin;
  };
  using Return = Planetarium*;

  using Message = serialization::PlanetariumCreate;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct PlanetariumDelete : not_constructible {
  struct In final {
    Planetarium const** const planetarium;
  };
  struct Out final {
    Planetarium const** const planetarium;
  };

  using Message = serialization::PlanetariumDelete;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct PlanetariumPlotCelestialFutureTrajectory : not_constructible {
  struct In final {
    Planetarium const* const planetarium;
    Plugin const* const plugin;
    int const celestial_index;
    char const* const vessel_guid;
    ScaledSpacePoint* const vertices;
    int const vertices_size;
  };
  struct Out final {
    double* const minimal_distance_from_camera;
    int* const vertex_count;
  };

  using Message = serialization::PlanetariumPlotCelestialFutureTrajectory;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct PlanetariumPlotCelestialPastTrajectory : not_constructible {
  struct In final {
    Planetarium const* const planetarium;
    Plugin const* const plugin;
    int const celestial_index;
    double const max_history_length;
    ScaledSpacePoint* const vertices;
    int const vertices_size;
  };
  struct Out final {
    double* const minimal_distance_from_camera;
    int* const vertex_count;
  };

  using Message = serialization::PlanetariumPlotCelestialPastTrajectory;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct PlanetariumPlotEquipotential : not_constructible {
  struct In final {
    Planetarium const* const planetarium;
    Plugin const* const plugin;
    int const index;
    ScaledSpacePoint* const vertices;
    int const vertices_size;
  };
  struct Out final {
    int* const vertex_count;
  };

  using Message = serialization::PlanetariumPlotEquipotential;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct PlanetariumPlotFlightPlanSegment : not_constructible {
  struct In final {
    Planetarium const* const planetarium;
    Plugin const* const plugin;
    char const* const vessel_guid;
    int const index;
    double const* const t_max;
    ScaledSpacePoint* const vertices;
    int const vertices_size;
  };
  struct Out final {
    int* const vertex_count;
  };

  using Message = serialization::PlanetariumPlotFlightPlanSegment;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct PlanetariumPlotPrediction : not_constructible {
  struct In final {
    Planetarium const* const planetarium;
    Plugin const* const plugin;
    char const* const vessel_guid;
    double const* const t_max;
    ScaledSpacePoint* const vertices;
    int const vertices_size;
  };
  struct Out final {
    int* const vertex_count;
  };

  using Message = serialization::PlanetariumPlotPrediction;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct PlanetariumPlotPsychohistory : not_constructible {
  struct In final {
    Planetarium const* const planetarium;
    Plugin const* const plugin;
    char const* const vessel_guid;
    double const max_history_length;
    double const* const t_max;
    ScaledSpacePoint* const vertices;
    int const vertices_size;
  };
  struct Out final {
    int* const vertex_count;
  };

  using Message = serialization::PlanetariumPlotPsychohistory;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct PrepareToReportCollisions : not_constructible {
  struct In final {
    Plugin* const plugin;
  };

  using Message = serialization::PrepareToReportCollisions;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct RenderedPredictionApsides : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
    double const* const t_max;
    int const celestial_index;
    XYZ const sun_world_position;
    int const max_points;
  };
  struct Out final {
    Iterator** const apoapsides;
    Iterator** const periapsides;
  };

  using Message = serialization::RenderedPredictionApsides;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct RenderedPredictionClosestApproaches : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
    XYZ const sun_world_position;
    int const max_points;
  };
  struct Out final {
    Iterator** const closest_approaches;
  };

  using Message = serialization::RenderedPredictionClosestApproaches;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct RenderedPredictionNodes : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
    double const* const t_max;
    XYZ const sun_world_position;
    int const max_points;
  };
  struct Out final {
    Iterator** const ascending;
    Iterator** const descending;
  };

  using Message = serialization::RenderedPredictionNodes;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct ReportGroundCollision : not_constructible {
  struct In final {
    Plugin const* const plugin;
    uint32_t const part_id;
  };

  using Message = serialization::ReportGroundCollision;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct ReportPartCollision : not_constructible {
  struct In final {
    Plugin const* const plugin;
    uint32_t const part1_id;
    uint32_t const part2_id;
  };

  using Message = serialization::ReportPartCollision;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct SayHello : not_constructible {
  using Return = char const*;

  using Message = serialization::SayHello;
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct SayNotFound : not_constructible {
  using Return = Status*;

  using Message = serialization::SayNotFound;
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct SerializePlugin : not_constructible {
  struct In final {
    Plugin const* const plugin;
    PullSerializer** const serializer;
    char const* const compressor;
    char const* const encoder;
  };
  struct Out final {
    PullSerializer** const serializer;
  };
  using Return = char const*;

  using Message = serialization::SerializePlugin;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct SetBufferDuration : not_constructible {
  struct In final {
    int const seconds;
  };

  using Message = serialization::SetBufferDuration;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct SetBufferedLogging : not_constructible {
  struct In final {
    int const max_severity;
  };

  using Message = serialization::SetBufferedLogging;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct SetFlag : not_constructible {
  struct In final {
    char const* const name;
    char const* const value;
  };

  using Message = serialization::SetFlag;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct SetMainBody : not_constructible {
  struct In final {
    Plugin* const plugin;
    int const index;
  };

  using Message = serialization::SetMainBody;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct SetPlottingFrame : not_constructible {
  struct In final {
    Plugin* const plugin;
    PlottingFrameParameters const& parameters;
  };

  using Message = serialization::SetPlottingFrame;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct SetStderrLogging : not_constructible {
  struct In final {
    int const min_severity;
  };

  using Message = serialization::SetStderrLogging;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct SetSuppressedLogging : not_constructible {
  struct In final {
    int const min_severity;
  };

  using Message = serialization::SetSuppressedLogging;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct SetTargetVessel : not_constructible {
  struct In final {
    Plugin* const plugin;
    char const* const vessel_guid;
    int const reference_body_index;
  };

  using Message = serialization::SetTargetVessel;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct SetVerboseLogging : not_constructible {
  struct In final {
    int const level;
  };

  using Message = serialization::SetVerboseLogging;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct SetWorldRotationalReferenceFrame : not_constructible {
  struct In final {
    Plugin* const plugin;
    int const index;
  };

  using Message = serialization::SetWorldRotationalReferenceFrame;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct UnmanageableVesselVelocity : not_constructible {
  struct In final {
    Plugin const* const plugin;
    QP const degrees_of_freedom;
    int const celestial_index;
  };
  using Return = XYZ;

  using Message = serialization::UnmanageableVesselVelocity;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct UpdateCelestialHierarchy : not_constructible {
  struct In final {
    Plugin const* const plugin;
    int const celestial_index;
    int const parent_index;
  };

  using Message = serialization::UpdateCelestialHierarchy;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct UpdatePrediction : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const* const vessel_guids;
  };

  using Message = serialization::UpdatePrediction;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct VesselBinormal : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };
  using Return = XYZ;

  using Message = serialization::VesselBinormal;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct VesselFromParent : not_constructible {
  struct In final {
    Plugin const* const plugin;
    int const parent_index;
    char const* const vessel_guid;
  };
  using Return = QP;

  using Message = serialization::VesselFromParent;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct VesselGetAnalysis : not_constructible {
  struct In final {
    Plugin* const plugin;
    char const* const vessel_guid;
    int const* const revolutions_per_cycle;
    int const* const days_per_cycle;
    int const ground_track_revolution;
  };
  using Return = OrbitAnalysis*;

  using Message = serialization::VesselGetAnalysis;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct VesselGetPredictionAdaptiveStepParameters : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };
  using Return = AdaptiveStepParameters;

  using Message = serialization::VesselGetPredictionAdaptiveStepParameters;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct VesselNormal : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };
  using Return = XYZ;

  using Message = serialization::VesselNormal;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct VesselRequestAnalysis : not_constructible {
  struct In final {
    Plugin* const plugin;
    char const* const vessel_guid;
    double const mission_duration;
  };

  using Message = serialization::VesselRequestAnalysis;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct VesselSetPredictionAdaptiveStepParameters : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
    AdaptiveStepParameters const adaptive_step_parameters;
  };

  using Message = serialization::VesselSetPredictionAdaptiveStepParameters;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct VesselTangent : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };
  using Return = XYZ;

  using Message = serialization::VesselTangent;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

struct VesselVelocity : not_constructible {
  struct In final {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };
  using Return = XYZ;

  using Message = serialization::VesselVelocity;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  Player::PointerMap& pointer_map);
};

