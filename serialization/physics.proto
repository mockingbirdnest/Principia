syntax = "proto2";

import "serialization/geometry.proto";
import "serialization/integrators.proto";
import "serialization/numerics.proto";
import "serialization/quantities.proto";

package principia.serialization;

message BarycentricRotatingDynamicFrame {
  extend DynamicFrame {
    optional BarycentricRotatingDynamicFrame
        barycentric_rotating_dynamic_frame = 6001;
  }
  required int32 primary = 1;
  required int32 secondary = 2;
}

message Body {
  oneof body {
    MassiveBody massive_body = 1;
    MasslessBody massless_body = 2;
  }
}

message BodyCentredNonRotatingDynamicFrame {
  extend DynamicFrame {
    optional BodyCentredNonRotatingDynamicFrame
        body_centred_non_rotating_dynamic_frame = 6000;
  }
  required int32 centre = 1;
}

message ContinuousTrajectory {
  message InstantaneousDegreesOfFreedom {
    required Point instant = 1;
    required Pair degrees_of_freedom = 2;
  }
  required Quantity step = 1;
  required Quantity tolerance = 2;
  required Quantity adjusted_tolerance = 3;
  required bool is_unstable = 4;
  required int32 degree = 5;
  required int32 degree_age = 6;
  repeated ChebyshevSeries series = 7;
  optional Point first_time = 8;
  repeated InstantaneousDegreesOfFreedom last_point = 9;
}

message DynamicFrame {
  extensions 6000 to 6999;  // Last used: 6000.
}

message Ephemeris {
  repeated MassiveBody body = 1;
  repeated ContinuousTrajectory trajectory = 2;
  required FixedStepSizeIntegrator planetary_integrator = 3;
  required Quantity step = 4;
  required Quantity fitting_tolerance = 5;
  required SystemState last_state = 6;
}

message MassiveBody {
  required Quantity gravitational_parameter = 1;
  extensions 2000 to 2999;  // Last used: 2002.
}

message MasslessBody {}

message OblateBody {
  extend RotatingBody {
    optional OblateBody extension = 4000;
  }
  required Quantity j2 = 1;
}

message PreBrouwerOblateBody {
  extend MassiveBody {
    optional PreBrouwerOblateBody extension = 2001;
  }
  required Frame frame = 3;
  required Quantity j2 = 1;
  required Multivector axis = 2;
}

message RotatingBody {
  extend MassiveBody {
    optional RotatingBody extension = 2002;
  }
  required Frame frame = 1;
  required Quantity reference_angle = 2;
  required Point reference_instant = 3;
  required Multivector angular_velocity = 4;
  extensions 4000 to 4999;  // Last used: 4000.
}

// TODO(phl): Rename to DiscreteTrajectory.
message Trajectory {
  message InstantaneousDegreesOfFreedom {
    required Point instant = 1;
    required Pair degrees_of_freedom = 2;
  }
  message Pointer {
    message Fork {
      required int32 children_distance = 1;
      required int32 timeline_distance = 2;
    }
    repeated Fork fork = 1;
  }
  message Litter {
    required Point fork_time = 1;
    repeated Trajectory trajectories = 2;
  }
  repeated Litter children = 1;
  repeated InstantaneousDegreesOfFreedom timeline = 2;
}
