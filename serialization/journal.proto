syntax = "proto2";

import "google/protobuf/descriptor.proto";

package principia.serialization;

// These two messages must come first because the other interchange messages use
// them and we need to generate the structs in the correct order.
message NavigationFrameParameters {
  required int32 extension = 1;  // 6000 to 6999, see DynamicFrame.
  required int32 centre_index = 2;
  required int32 primary_index = 3;
  required int32 secondary_index = 4;
}

message XYZ {
  required double x = 1;
  required double y = 2;
  required double z = 3;
}

message Burn {
  required double thrust_in_kilonewtons = 1;
  required double specific_impulse_in_seconds_g0 = 2;
  required NavigationFrameParameters frame = 3;
  required double initial_time = 4;
  required XYZ delta_v = 5;
}

message NavigationManoeuvre {
  required Burn burn = 1;
  required double initial_mass_in_tonnes = 2;
  required double final_mass_in_tonnes = 3;
  required double mass_flow = 4;
  required double duration = 5;
  required double final_time = 6;
  required double time_of_half_delta_v = 7;
  required double time_to_half_delta_v = 8;
  required XYZ inertial_direction = 9;
  // Frenet trihedron at the beginning of the manœuvre.
  required XYZ binormal = 10;
  required XYZ normal = 11;
  required XYZ tangent = 12;
}

message KSPPart {
  // TODO(egg): Y U NO USE QP?
  required XYZ world_position = 1;
  required XYZ world_velocity = 2;
  required double mass_in_tonnes = 3;
  required XYZ gravitational_acceleration_to_be_applied_by_ksp = 4;
  required uint32 id = 5;
}

message QP {
  required XYZ q = 1;
  required XYZ p = 2;
}

message WXYZ {
  required double w = 1;
  required double x = 2;
  required double y = 3;
  required double z = 4;
}

message XYZSegment {
  required XYZ begin = 1;
  required XYZ end = 2;
}

message Method {
  extensions 5000 to 5999;  // Last used: 5077.
}

message AddVesselToNextPhysicsBubble {
  extend Method {
    optional AddVesselToNextPhysicsBubble extension = 5045;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin", (is_subject) = true];
    required string vessel_guid = 2;
    repeated KSPPart parts = 3 [(size) = "count"];
  }
  required In in = 1;
}

message AdvanceTime {
  extend Method {
    optional AdvanceTime extension = 5019;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin", (is_subject) = true];
    required double t = 2;
    required double planetarium_rotation = 3;
  }
  required In in = 1;
}

message AtEnd {
  extend Method {
    optional AtEnd extension = 5035;
  }
  message In {
    required fixed64 line_and_iterator = 1
        [(pointer_to) = "LineAndIterator const", (is_subject) = true];
  }
  message Return {
    required bool result = 1;
  }
  required In in = 1;
  required Return return = 3;
}

message BubbleDisplacementCorrection {
  extend Method {
    optional BubbleDisplacementCorrection extension = 5046;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required XYZ sun_position = 2;
  }
  message Return {
    required XYZ result = 1;
  }
  required In in = 1;
  required Return return = 3;
}

message BubbleVelocityCorrection {
  extend Method {
    optional BubbleVelocityCorrection extension = 5047;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required int32 reference_body_index = 2;
  }
  message Return {
    required XYZ result = 1;
  }
  required In in = 1;
  required Return return = 3;
}

message CelestialFromParent {
  extend Method {
    optional CelestialFromParent extension = 5026;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required int32 celestial_index = 2;
  }
  message Return {
    required QP result = 1;
  }
  required In in = 1;
  required Return return = 3;
}

message CurrentTime {
  extend Method {
    optional CurrentTime extension = 5048;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
  }
  message Return {
    required double result = 1;
  }
  required In in = 1;
  required Return return = 3;
}

message DeleteLineAndIterator {
  extend Method {
    optional DeleteLineAndIterator extension = 5036;
  }
  message In {
    required fixed64 line_and_iterator = 1 [(pointer_to) = "LineAndIterator",
                                            (is_consumed) = true];
  }
  message Out {
    required fixed64 line_and_iterator = 1 [(pointer_to) = "LineAndIterator"];
  }
  required In in = 1;
  required Out out = 2;
}

message DeletePlugin {
  extend Method {
    optional DeletePlugin extension = 5000;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_consumed) = true];
  }
  message Out {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const"];
  }
  required In in = 1;
  required Out out = 2;
}

message DeletePluginSerialization {
  extend Method {
    optional DeletePluginSerialization extension = 5049;
  }
  message In {
    required fixed64 serialization = 1 [(pointer_to) = "char const",
                                        (is_consumed) = true];
  }
  message Out {
    required fixed64 serialization = 1 [(pointer_to) = "char const"];
  }
  required In in = 1;
  required Out out = 2;
}

message DeserializePlugin {
  extend Method {
    optional DeserializePlugin extension = 5050;
  }
  message In {
    required string serialization = 1 [(size) = "serialization_size"];
    required fixed64 deserializer = 2
        [(pointer_to) = "PushDeserializer",
         (is_consumed_if) = "serialization->empty()"];
    required fixed64 plugin = 3 [(pointer_to) = "Plugin const"];
  }
  message Out {
    required fixed64 deserializer = 1
        [(pointer_to) = "PushDeserializer",
         (is_produced_if) = "!serialization->empty()"];
    required fixed64 plugin = 2 [(pointer_to) = "Plugin const",
                                 (is_produced) = true];
  }
  required In in = 1;
  required Out out = 2;
}

message EndInitialization {
  extend Method {
    optional EndInitialization extension = 5020;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin", (is_subject) = true];
  }
  required In in = 1;
}

message FetchAndIncrement {
  extend Method {
    optional FetchAndIncrement extension = 5037;
  }
  message In {
    required fixed64 line_and_iterator = 1 [(pointer_to) = "LineAndIterator",
                                            (is_subject) = true];
  }
  message Return {
    required XYZSegment result = 1;
  }
  required In in = 1;
  required Return return = 3;
}

message FlightPlanAppend {
  extend Method {
    optional FlightPlanAppend extension = 5063;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
    required Burn burn = 3;
  }
  message Return {
    required bool result = 1;
  }
  required In in = 1;
  required Return return = 3;
}

message FlightPlanCreate {
  extend Method {
    optional FlightPlanCreate extension = 5071;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
    required double final_time = 3;
    required double mass_in_tonnes = 4;
  }
  required In in = 1;
}

message FlightPlanDelete {
  extend Method {
    optional FlightPlanDelete extension = 5072;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
  }
  required In in = 1;
}

message FlightPlanExists {
  extend Method {
    optional FlightPlanExists extension = 5074;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
  }
  message Return {
    required bool result = 1;
  }
  required In in = 1;
  required Return return = 3;
}

message FlightPlanGetFinalTime {
  extend Method {
    optional FlightPlanGetFinalTime extension = 5076;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
  }
  message Return {
    required double result = 1;
  }
  required In in = 1;
  required Return return = 3;
}

message FlightPlanGetInitialTime {
  extend Method {
    optional FlightPlanGetInitialTime extension = 5075;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
  }
  message Return {
    required double result = 1;
  }
  required In in = 1;
  required Return return = 3;
}

message FlightPlanGetManoeuvre {
  extend Method {
    optional FlightPlanGetManoeuvre extension = 5064;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
    required int32 index = 3;
  }
  message Return {
    required NavigationManoeuvre result = 1;
  }
  required In in = 1;
  required Return return = 3;
}

message FlightPlanNumberOfManoeuvres {
  extend Method {
    optional FlightPlanNumberOfManoeuvres extension = 5038;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
  }
  message Return {
    required int32 result = 1;
  }
  required In in = 1;
  required Return return = 3;
}

message FlightPlanNumberOfSegments {
  extend Method {
    optional FlightPlanNumberOfSegments extension = 5070;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
  }
  message Return {
    required int32 result = 1;
  }
  required In in = 1;
  required Return return = 3;
}

message FlightPlanRemoveLast {
  extend Method {
    optional FlightPlanRemoveLast extension = 5065;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
  }
  required In in = 1;
}

message FlightPlanRenderedSegment {
  extend Method {
    optional FlightPlanRenderedSegment extension = 5069;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
    required XYZ sun_world_position = 3;
    required int32 index = 4;
  }
  message Return {
    required fixed64 result = 1 [(pointer_to) = "LineAndIterator",
                                 (is_produced) = true];
  }
  required In in = 1;
  required Return return = 3;
}

message FlightPlanRenderedSegmentEndpoints {
  extend Method {
    optional FlightPlanRenderedSegmentEndpoints extension = 5077;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
    required XYZ sun_world_position = 3;
    required int32 index = 4;
  }
  message Return {
    required XYZSegment result = 1;
  }
  required In in = 1;
  required Return return = 3;
}

message FlightPlanReplaceLast{
  extend Method {
    optional FlightPlanReplaceLast extension = 5066;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
    required Burn burn = 3;
  }
  message Return {
    required bool result = 1;
  }
  required In in = 1;
  required Return return = 3;
}

message FlightPlanSetFinalTime {
  extend Method {
    optional FlightPlanSetFinalTime extension = 5067;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
    required double final_time = 3;
  }
  message Return {
    required bool result = 1;
  }
  required In in = 1;
  required Return return = 3;
}

message FlightPlanSetTolerances {
  extend Method {
    optional FlightPlanSetTolerances extension = 5068;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
    required double length_integration_tolerance = 3;
    required double speed_integration_tolerance = 4;
  }
  required In in = 1;
}

message ForgetAllHistoriesBefore {
  extend Method {
    optional ForgetAllHistoriesBefore extension = 5021;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin", (is_subject) = true];
    required double t = 2;
  }
  required In in = 1;
}

message GetBufferDuration {
  extend Method {
    optional GetBufferDuration extension = 5005;
  }
  message Return {
    required int32 result = 1;
  }
  required Return return = 3;
}

message GetBufferedLogging {
  extend Method {
    optional GetBufferedLogging extension = 5006;
  }
  message Return {
    required int32 result = 1;
  }
  required Return return = 3;
}

message GetPlottingFrame {
  extend Method {
    optional GetPlottingFrame extension = 5061;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const"];
  }
  message Return {
    // This doesn't transfer ownership to the caller, but we must enter the
    // pointer in the pointer_map in case it crosses the interface again.
    required fixed64 result = 1 [(pointer_to) = "NavigationFrame const",
                                 (is_produced) = true];
  }
  required In in = 1;
  required Return return = 3;
}

message GetStderrLogging {
  extend Method {
    optional GetStderrLogging extension = 5007;
  }
  message Return {
    required int32 result = 1;
  }
  required Return return = 3;
}

message GetSuppressedLogging {
  extend Method {
    optional GetSuppressedLogging extension = 5008;
  }
  message Return {
    required int32 result = 1;
  }
  required Return return = 3;
}

message GetVerboseLogging {
  extend Method {
    optional GetVerboseLogging extension = 5009;
  }
  message Return {
    required int32 result = 1;
  }
  required Return return = 3;
}

message HasPrediction {
  extend Method {
    optional HasPrediction extension = 5028;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
  }
  message Return {
    required bool result = 1;
  }
  required In in = 1;
  required Return return = 3;
}

message HasVessel {
  extend Method {
    optional HasVessel extension = 5039;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin", (is_subject) = true];
    required string vessel_guid = 2;
  }
  message Return {
    required bool result = 1;
  }
  required In in = 1;
  required Return return = 3;
}

message InitGoogleLogging {
  extend Method {
    optional InitGoogleLogging extension = 5002;
  }
}

message InsertCelestialAbsoluteCartesian {
  extend Method {
    optional InsertCelestialAbsoluteCartesian extension = 5003;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin", (is_subject) = true];
    required int32 celestial_index = 2;
    optional int32 parent_index = 3;
    required string gravitational_parameter = 4;
    optional string axis_right_ascension = 5;
    optional string axis_declination = 6;
    optional string j2 = 7;
    optional string reference_radius = 8;
    required string x = 9;
    required string y = 10;
    required string z = 11;
    required string vx = 12;
    required string vy = 13;
    required string vz = 14;
  }
  required In in = 1;
}

message InsertCelestialJacobiKeplerian {
  extend Method {
    optional InsertCelestialJacobiKeplerian extension = 5073;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin", (is_subject) = true];
    required int32 celestial_index = 2;
    required int32 parent_index = 3;
    required string gravitational_parameter = 4;
    optional string axis_right_ascension = 5;
    optional string axis_declination = 6;
    optional string j2 = 7;
    optional string reference_radius = 8;
    required double eccentricity = 9;
    required string mean_motion = 10;
    required string inclination = 11;
    required string longitude_of_ascending_node = 12;
    required string argument_of_periapsis = 13;
    required string mean_anomaly = 14;
  }
  required In in = 1;
}

message InsertOrKeepVessel {
  extend Method {
    optional InsertOrKeepVessel extension = 5022;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin", (is_subject) = true];
    required string vessel_guid = 2;
    required int32 parent_index = 3;
  }
  message Return {
    required bool result = 1;
  }
  required In in = 1;
  required Return return = 3;
}

message InsertSun {
  extend Method {
    optional InsertSun extension = 5023;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin", (is_subject) = true];
    required int32 celestial_index = 2;
    required double gravitational_parameter = 3;
  }
  required In in = 1;
}

message LogError {
  extend Method {
    optional LogError extension = 5010;
  }
  message In {
    required string text = 1;
  }
  required In in = 1;
}

message LogFatal {
  extend Method {
    optional LogFatal extension = 5011;
  }
  message In {
    required string text = 1;
  }
  required In in = 1;
}

message LogInfo {
  extend Method {
    optional LogInfo extension = 5012;
  }
  message In {
    required string text = 1;
  }
  required In in = 1;
}

message LogWarning {
  extend Method {
    optional LogWarning extension = 5013;
  }
  message In {
    required string text = 1;
  }
  required In in = 1;
}

message NavballOrientation {
  extend Method {
    optional NavballOrientation extension = 5051;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required XYZ sun_world_position = 3;
    required XYZ ship_world_position = 4;
  }
  message Return {
    required WXYZ result = 1;
  }
  required In in = 1;
  required Return return = 3;
}

message NewBarycentricRotatingNavigationFrame {
  extend Method {
    optional NewBarycentricRotatingNavigationFrame extension = 5029;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required int32 primary_index = 2;
    required int32 secondary_index = 3;
  }
  message Return {
    required fixed64 result = 1 [(pointer_to) = "NavigationFrame",
                                  (is_produced) = true];
  }
  required In in = 1;
  required Return return = 3;
}

message NewBodyCentredNonRotatingNavigationFrame {
  extend Method {
    optional NewBodyCentredNonRotatingNavigationFrame extension = 5030;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required int32 reference_body_index = 2;
  }
  message Return {
    required fixed64 result = 1 [(pointer_to) = "NavigationFrame",
                                 (is_produced) = true];
  }
  required In in = 1;
  required Return return = 3;
}

message NewNavigationFrame {
  extend Method {
    optional NewNavigationFrame extension = 5062;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required NavigationFrameParameters parameters = 2;
  }
  message Return {
    required fixed64 result = 1 [(pointer_to) = "NavigationFrame",
                                 (is_produced) = true];
  }
  required In in = 1;
  required Return return = 3;
}

message NewPlugin {
  extend Method {
    optional NewPlugin extension = 5001;
  }
  message In {
    required double initial_time = 1;
    required double planetarium_rotation_in_degrees = 2;
  }
  message Return {
    required fixed64 result = 1 [(pointer_to) = "Plugin",
                                 (is_produced) = true];
  }
  required In in = 1;
  required Return return = 3;
}

message NumberOfSegments {
  extend Method {
    optional NumberOfSegments extension = 5040;
  }
  message In {
    required fixed64 line_and_iterator = 1
        [(pointer_to) = "LineAndIterator const", (is_subject) = true];
  }
  message Return {
    required int32 result = 1;
  }
  required In in = 1;
  required Return return = 3;
}

message PhysicsBubbleIsEmpty {
  extend Method {
    optional PhysicsBubbleIsEmpty extension = 5052;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
  }
  message Return {
    required bool result = 1;
  }
  required In in = 1;
  required Return return = 3;
}

message RenderedPrediction {
  extend Method {
    optional RenderedPrediction extension = 5031;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin", (is_subject) = true];
    required string vessel_guid = 2;
    required XYZ sun_world_position = 4;
  }
  message Return {
    required fixed64 result = 1 [(pointer_to) = "LineAndIterator",
                                 (is_produced) = true];
  }
  required In in = 1;
  required Return return = 3;
}

message RenderedVesselTrajectory {
  extend Method {
    optional RenderedVesselTrajectory extension = 5032;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
    required XYZ sun_world_position = 4;
  }
  message Return {
    required fixed64 result = 1 [(pointer_to) = "LineAndIterator",
                                 (is_produced) = true];
  }
  required In in = 1;
  required Return return = 3;
}

message SayHello {
  extend Method {
    optional SayHello extension = 5053;
  }
  message Return {
    required fixed64 result = 1 [(pointer_to) = "char const",
                                 (is_produced) = true];
  }
  required Return return = 3;
}

message SerializePlugin {
  extend Method {
    optional SerializePlugin extension = 5054;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required fixed64 serializer = 2
        [(pointer_to) = "PullSerializer",
         (is_consumed_if) = "result == nullptr"];
  }
  message Out {
    required fixed64 serializer = 1 [(pointer_to) = "PullSerializer",
                                     (is_produced_if) = "result != nullptr"];
  }
  message Return {
    // TODO(phl): Why the tag 2?
    required fixed64 result = 2 [(pointer_to) = "char const",
                                 (is_produced_if) = "result != nullptr"];
  }
  required In in = 1;
  required Out out = 2;
  optional Return return = 3;
}

message SetBufferDuration {
  extend Method {
    optional SetBufferDuration extension = 5014;
  }
  message In {
    required int32 seconds = 1;
  }
  required In in = 1;
}

message SetBufferedLogging {
  extend Method {
    optional SetBufferedLogging extension = 5015;
  }
  message In {
    required int32 max_severity = 1;
  }
  required In in = 1;
}

message SetPlottingFrame {
  extend Method {
    optional SetPlottingFrame extension = 5059;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin", (is_subject) = true];
    required fixed64 navigation_frame = 2 [(pointer_to) = "NavigationFrame",
                                           (is_consumed) = true];
  }
  message Out {
    required fixed64 navigation_frame = 1 [(pointer_to) = "NavigationFrame"];
  }
  required In in = 1;
  required Out out = 2;
}

message SetPredictionLength {
  extend Method {
    optional SetPredictionLength extension = 5042;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin", (is_subject) = true];
    required double t = 2;
  }
  required In in = 1;
}

message SetPredictionLengthTolerance {
  extend Method {
    optional SetPredictionLengthTolerance extension = 5043;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin", (is_subject) = true];
    required double l = 2;
  }
  required In in = 1;
}

message SetPredictionSpeedTolerance {
  extend Method {
    optional SetPredictionSpeedTolerance extension = 5044;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin", (is_subject) = true];
    required double v = 2;
  }
  required In in = 1;
}

message SetStderrLogging {
  extend Method {
    optional SetStderrLogging extension = 5016;
  }
  message In {
    required int32 min_severity = 1;
  }
  required In in = 1;
}

message SetSuppressedLogging {
  extend Method {
    optional SetSuppressedLogging extension = 5017;
  }
  message In {
    required int32 min_severity = 1;
  }
  required In in = 1;
}

message SetVerboseLogging {
  extend Method {
    optional SetVerboseLogging extension = 5018;
  }
  message In {
    required int32 level = 1;
  }
  required In in = 1;
}

message SetVesselStateOffset {
  extend Method {
    optional SetVesselStateOffset extension = 5024;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin", (is_subject) = true];
    required string vessel_guid = 2;
    required QP from_parent = 3;
  }
  required In in = 1;
}

message UpdateCelestialHierarchy {
  extend Method {
    optional UpdateCelestialHierarchy extension = 5025;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required int32 celestial_index = 2;
    required int32 parent_index = 3;
  }
  required In in = 1;
}

message UpdatePrediction {
  extend Method {
    optional UpdatePrediction extension = 5033;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
  }
  required In in = 1;
}

message VesselBinormal {
  extend Method {
    optional VesselBinormal extension = 5055;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
  }
  message Return {
    required XYZ result = 1;
  }
  required In in = 1;
  required Return return = 3;
}

message VesselFromParent {
  extend Method {
    optional VesselFromParent extension = 5034;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
  }
  message Return {
    required QP result = 1;
  }
  required In in = 1;
  required Return return = 3;
}

message VesselNormal {
  extend Method {
    optional VesselNormal extension = 5056;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
  }
  message Return {
    required XYZ result = 1;
  }
  required In in = 1;
  required Return return = 3;
}

message VesselTangent {
  extend Method {
    optional VesselTangent extension = 5057;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
  }
  message Return {
    required XYZ result = 1;
  }
  required In in = 1;
  required Return return = 3;
}

extend google.protobuf.FieldOptions {
  // For a fixed64 field (which is used to represent a pointer), gives the C++
  // designated type of the pointer.
  optional string pointer_to = 50000;

  // For a repeated message or string field that comes with a separate size
  // parameter, gives the name of the size parameter.
  optional string size = 50001;

  // For a fixed64 field, indicates whether the corresponding pointer is
  // consumed (deleted or has its ownership transferred) or produced (allocated)
  // by the interface.
  optional bool is_consumed = 50002;
  optional bool is_produced = 50003;

  // Same as above, but the consumption/production is conditional on some state
  // of the parameters.
  optional string is_consumed_if = 50004;
  optional string is_produced_if = 50005;

  // For a fixed64 field (which is used to represent a pointer), indicates that
  // it should be the subject in C# methods.
  optional bool is_subject = 50006;
}
