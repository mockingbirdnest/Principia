<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup Label="Globals">
    <Keyword>Win32Proj</Keyword>
    <WindowsTargetPlatformVersion>10.0.22621.0</WindowsTargetPlatformVersion>
  </PropertyGroup>
  <!--Define project configurations.  Nothing interesting can happen here.-->
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release_LLVM|x64">
      <Configuration>Release_LLVM</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug_AVX_FMA|x64">
      <Configuration>Debug_AVX_FMA</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release_LLVM_AVX_FMA|x64">
      <Configuration>Release_LLVM_AVX_FMA</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release_AVX_FMA|x64">
      <Configuration>Release_AVX_FMA</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>

  <!--Microsoft C++ stuff.-->
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />

  <!--Definitions.-->
  <PropertyGroup>
    <!--Predicates.-->
    <PrincipiaCompilerClangLLVM>false</PrincipiaCompilerClangLLVM>
    <PrincipiaCompilerClangLLVM Condition="$(ConfigurationWithoutCPUFeatures)==Release_LLVM">true</PrincipiaCompilerClangLLVM>
    <PrincipiaOptimize>false</PrincipiaOptimize>
    <PrincipiaOptimize Condition="$(Configuration.StartsWith('Release'))">true</PrincipiaOptimize>
    <PrincipiaTestProject>true</PrincipiaTestProject>
    <PrincipiaTestProject Condition="$(ProjectName) == ksp_plugin or
                                     $(ProjectName) == serialization or
                                     $(ProjectName) == benchmarks or
                                     $(ProjectName) == nanobenchmarks or
                                     $(ProjectName) == tools">false</PrincipiaTestProject>
    <!--Dependency paths.-->
    <PrincipiaDependencyConfiguration>Debug</PrincipiaDependencyConfiguration>
    <PrincipiaDependencyConfiguration Condition="$(PrincipiaOptimize)">Release</PrincipiaDependencyConfiguration>
  </PropertyGroup>

  <!--Compiler.-->
  <PropertyGroup>
    <PlatformToolset>v143</PlatformToolset>
    <PlatformToolset Condition="$(PrincipiaCompilerClangLLVM)">ClangCL</PlatformToolset>
  </PropertyGroup>

  <!--Target.-->
  <PropertyGroup>
    <ConfigurationType Condition="$(ProjectName) == ksp_plugin">DynamicLibrary</ConfigurationType>
    <ConfigurationType Condition="$(ProjectName) == serialization">StaticLibrary</ConfigurationType>
    <ConfigurationType Condition="$(PrincipiaTestProject) or
                                  $(ProjectName) == tools or
                                  $(ProjectName) == benchmarks">Application</ConfigurationType>
  </PropertyGroup>
  <ItemDefinitionGroup Condition="$(ConfigurationType)==Application">
    <Link>
      <SubSystem>Console</SubSystem>
    </Link>
  </ItemDefinitionGroup>

  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />

  <!--Common options.-->
  <PropertyGroup>
    <CharacterSet>Unicode</CharacterSet>
    <!--Can't use <LinkIncremental>true</LinkIncremental> due to profiling.-->
  </PropertyGroup>

  <ItemDefinitionGroup>
    <ClCompile>
      <EnableEnhancedInstructionSet Condition="$(PlatformWithCPUFeatures.Contains('AVX'))">AdvancedVectorExtensions</EnableEnhancedInstructionSet>
      <PreprocessorDefinitions Condition="!$(PlatformWithCPUFeatures.Contains('AVX'))">PRINCIPIA_HAS_AVX=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <PreprocessorDefinitions Condition="!$(PlatformWithCPUFeatures.Contains('FMA'))">PRINCIPIA_HAS_FMA=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <PreprocessorDefinitions Condition="$(PlatformWithCPUFeatures.Contains('AVX'))">PRINCIPIA_HAS_AVX=1;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <PreprocessorDefinitions Condition="$(PlatformWithCPUFeatures.Contains('FMA'))">PRINCIPIA_HAS_FMA=1;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <CallingConvention>vectorcall</CallingConvention>
      <AdditionalIncludeDirectories>C:\Program Files;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AdditionalOptions>/utf-8 /bigobj /w14714 /Zc:char8_t- /Zf</AdditionalOptions>
      <AdditionalOptions Condition="$(ProjectName) != serialization">/w14061 %(AdditionalOptions)</AdditionalOptions>
      <LanguageStandard>stdcpplatest</LanguageStandard>
      <LanguageStandard_C>stdc17</LanguageStandard_C>
      <UseStandardPreprocessor>true</UseStandardPreprocessor>
      <WarningLevel Condition="!$(PrincipiaCompilerClangLLVM)">Level3</WarningLevel>
      <WarningLevel Condition="$(PrincipiaCompilerClangLLVM) and
                               $(ProjectName) == serialization">TurnOffAllWarnings</WarningLevel>
      <WarningLevel Condition="$(PrincipiaCompilerClangLLVM) and
                               $(ProjectName) != serialization">EnableAllWarnings</WarningLevel>
      <AdditionalOptions Condition="$(PrincipiaCompilerClangLLVM)">
        <!-- \-\-version-->
        <!-- \-v-->
        -fbracket-depth=257
        -ferror-limit=1000
        -Werror=typename-missing
        -Werror=microsoft-template
        -Werror=unknown-argument
        -Wno-c++98-compat-pedantic
        -Wno-c++98-compat
        -Wno-c99-compat
        -Wno-exit-time-destructors
        -Wno-float-equal
        -Wno-format-nonliteral
        -Wno-global-constructors
        -Wno-gnu-anonymous-struct
        -Wno-gnu-zero-variadic-macro-arguments
        -Wno-implicit-int-float-conversion
        -Wno-macro-redefined
        -Wno-mathematical-notation-identifier-extension
        -Wno-nested-anon-types
        -Wno-reserved-macro-identifier
        -Wno-shadow-field-in-constructor
        -Wno-shadow-uncaptured-local
        -Wno-sign-compare
        -Wno-sign-conversion
        -Wno-undef
        -Wno-unknown-pragmas
        -Wno-unsafe-buffer-usage
        -Xclang -fno-char8_t
        <!--Warnings in protobuf generated code are none of our business.-->
        -Xclang --system-header-prefix=serialization/
        <!--Same for warnings in dependencies.-->
        -Xclang --system-header-prefix=absl/
        -Xclang --system-header-prefix=benchmark/
        -Xclang --system-header-prefix=google/
        -Xclang --system-header-prefix=glog/
        -Xclang --system-header-prefix=gtest/
        -Xclang --system-header-prefix=gmock/
        -Xclang --system-header-prefix=zfp/
      </AdditionalOptions>
      <MultiProcessorCompilation>true</MultiProcessorCompilation>
      <PreprocessorDefinitions Condition="!$(PrincipiaCompilerClangLLVM)">
        _ENABLE_EXTENDED_ALIGNED_STORAGE;NOGDI;NOMINMAX;%(PreprocessorDefinitions)
      </PreprocessorDefinitions>
      <TreatWarningAsError Condition="!$(PrincipiaCompilerClangLLVM)">true</TreatWarningAsError>
      <SDLCheck>true</SDLCheck>
    </ClCompile>
    <Link>
      <GenerateDebugInformation>DebugFastLink</GenerateDebugInformation>
      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
    </Link>
  </ItemDefinitionGroup>
  <!--Debug options.-->
  <PropertyGroup Condition="!$(PrincipiaOptimize)">
    <UseDebugLibraries>true</UseDebugLibraries>
  </PropertyGroup>
  <ItemDefinitionGroup Condition="!$(PrincipiaOptimize)">
    <ClCompile>
      <Optimization>Disabled</Optimization>
      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>
    </ClCompile>
    <Link>
      <AdditionalOptions>/ignore:4099</AdditionalOptions>
    </Link>
  </ItemDefinitionGroup>
  <!--Release options.-->
  <PropertyGroup Condition="$(PrincipiaOptimize)">
    <UseDebugLibraries>false</UseDebugLibraries>
  </PropertyGroup>
  <ItemDefinitionGroup Condition="$(PrincipiaOptimize)">
    <ClCompile>
      <Optimization>MaxSpeed</Optimization>
      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
    <Link>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <OptimizeReferences>true</OptimizeReferences>
    </Link>
  </ItemDefinitionGroup>

  <!--Import our property sheets.-->
  <Import Project="$(SolutionDir)suppress_useless_warnings.props" />
  <Import Project="$(SolutionDir)profiling.props" />
  <Import Project="$(SolutionDir)include_solution.props" />
  <Import Project="$(SolutionDir)..\Google\protobuf\vsprojects\portability_macros.props" />
  <Import Project="$(SolutionDir)google_protobuf.props" />
  <Import Project="$(SolutionDir)..\Google\glog\msvc\portability_macros.props" />
  <Import Project="$(SolutionDir)google_glog.props" />
  <Import Project="$(SolutionDir)..\Google\gipfeli\msvc\portability_macros.props" />
  <Import Project="$(SolutionDir)google_gipfeli.props" />
  <Import Project="$(SolutionDir)..\Google\abseil-cpp\msvc\portability_macros.props" />
  <Import Project="$(SolutionDir)google_abseil-cpp.props" />
  <Import Project="$(SolutionDir)generate_version_translation_unit.props" />
  <Import Project="$(SolutionDir)inria_core-math.props" />
  <Import Project="$(SolutionDir)llnl_zfp.props" />
  <Import Project="$(SolutionDir)boost_config.props" />
  <Import Project="$(SolutionDir)boost_multiprecision.props" />

  <ImportGroup Condition="$(ProjectName) == benchmarks or
                          $(ProjectName) == ksp_plugin_test or
                          $(ProjectName) == journal">
    <Import Project="$(SolutionDir)..\Google\benchmark\msvc\portability_macros.props" />
    <Import Project="$(SolutionDir)..\Google\benchmark\msvc\windows_libraries.props" />
    <Import Project="$(SolutionDir)google_benchmark.props" />
  </ImportGroup>

  <ImportGroup Condition="$(PrincipiaTestProject)">
    <Import Project="$(SolutionDir)..\Google\googletest\googletest\msvc\portability_macros.props" />
    <Import Project="$(SolutionDir)google_googletest.props" />
    <Import Project="$(SolutionDir)google_googlemock_main.props" />
  </ImportGroup>

  <!--Tools.-->
  <PropertyGroup>
    <!--Protocompiler.-->
    <Protoc>$(SolutionDir)..\Google\protobuf\vsprojects\Release\x64\protoc.exe</Protoc>
    <ProtocCommand>"$(Protoc)" -I"$(SolutionDir)." --cpp_out=.. "{0}"</ProtocCommand>
    <ProtocMessage>Generating C++ files for {0}</ProtocMessage>
    <ProtocOutputs>{0}.pb.h;{0}.pb.cc;</ProtocOutputs>
    <!--Principia tools.-->
    <PrincipiaGenerateProfiles>$(OutDir)tools.exe</PrincipiaGenerateProfiles>
    <PrincipiaGenerateProfilesCommand>"$(PrincipiaGenerateProfiles)" generate_profiles</PrincipiaGenerateProfilesCommand>
    <PrincipiaGenerateProfilesMessage>Generating C#/C++ files for {0}</PrincipiaGenerateProfilesMessage>
    <PrincipiaGenerateProfilesOutputs>..\ksp_plugin\interface.generated.h;..\journal\player.generated.cc;..\journal\profiles.generated.h;..\journal\profiles.generated.cc;..\ksp_plugin_adapter\interface.generated.cs</PrincipiaGenerateProfilesOutputs>
  </PropertyGroup>

  <!--Everybody depends on the serialization project.-->
  <ItemDefinitionGroup Condition="$(ProjectName)!=serialization">
  </ItemDefinitionGroup>
  <ItemGroup Condition="$(ProjectName)!=serialization">
    <ProjectReference Include="$(SolutionDir)serialization\serialization.vcxproj">
      <Project>{5c482c18-bbae-484d-a211-a25c86370061}</Project>
    </ProjectReference>
  </ItemGroup>
  <!--journal depends on the ksp_plugin DLL.-->
  <ItemDefinitionGroup Condition="$(ProjectName) == journal">
    <ClCompile>
      <PreprocessorDefinitions>PRINCIPIA_DLL_IMPORT=1;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
  </ItemDefinitionGroup>
  <ItemGroup Condition="$(ProjectName) == journal">
    <ProjectReference Include="$(SolutionDir)ksp_plugin\ksp_plugin.vcxproj">
      <Project>{a3f94607-2666-408f-af98-0e47d61c98bb}</Project>
    </ProjectReference>
  </ItemGroup>

  <PropertyGroup Condition="$(ProjectName) == ksp_plugin">
    <TargetName>principia</TargetName>
  </PropertyGroup>
  <!--Copy DLLs to GameData.-->
  <ItemDefinitionGroup Condition="$(ConfigurationType) == DynamicLibrary">
    <PostBuildEvent>
      <Command>
        if not exist "$(SolutionDir)$(ConfigurationWithoutCPUFeatures)\GameData\Principia\$(PlatformWithCPUFeatures)" mkdir "$(SolutionDir)$(ConfigurationWithoutCPUFeatures)\GameData\Principia\$(PlatformWithCPUFeatures)"
        if exist "$(OutDir)glog.dll" copy /Y "$(OutDir)glog.dll" "$(SolutionDir)$(ConfigurationWithoutCPUFeatures)\GameData\Principia\$(PlatformWithCPUFeatures)"
        if exist "$(OutDir)libprotobuf.dll" copy /Y "$(OutDir)libprotobuf.dll" "$(SolutionDir)$(ConfigurationWithoutCPUFeatures)\GameData\Principia\$(PlatformWithCPUFeatures)"
        copy /Y "$(TargetPath)" "$(SolutionDir)$(ConfigurationWithoutCPUFeatures)\GameData\Principia\$(PlatformWithCPUFeatures)"
        copy /Y "$(OutDir)$(TargetName).pdb" "$(SolutionDir)$(ConfigurationWithoutCPUFeatures)\GameData\Principia\$(PlatformWithCPUFeatures)"
      </Command>
      <Message>Copying $(TargetName).dll to GameData</Message>
    </PostBuildEvent>
  </ItemDefinitionGroup>

  <!--This import must be at the end.-->
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
</Project>
