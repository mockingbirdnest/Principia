#pragma once

#include "numerics/gradient_descent.hpp"

#include <algorithm>
#include <optional>

#include "absl/status/status.h"
#include "base/jthread.hpp"  // üßô For RETURN_IF_STOPPED.
#include "geometry/grassmann.hpp"
#include "geometry/point.hpp"
#include "geometry/symmetric_bilinear_form.hpp"
#include "numerics/fixed_arrays.hpp"
#include "numerics/hermite2.hpp"
#include "numerics/elementary_functions.hpp"

namespace principia {
namespace numerics {
namespace _gradient_descent {
namespace internal {

using namespace principia::geometry::_grassmann;
using namespace principia::geometry::_point;
using namespace principia::geometry::_symmetric_bilinear_form;
using namespace principia::numerics::_fixed_arrays;
using namespace principia::numerics::_hermite2;
using namespace principia::numerics::_elementary_functions;

template<typename Scalar, typename S, int s>
struct Generator<Scalar, FixedVector<S, s>> {
  using Gradient = FixedVector<Quotient<Scalar, S>, s>;
  static FixedMatrix<double, s, s> InnerProductForm();
};

template<typename Scalar, typename S, typename F>
struct Generator<Scalar, Vector<S, F>> {
  using Gradient = Vector<Quotient<Scalar, S>, F>;
  static SymmetricBilinearForm<double, F, Vector> InnerProductForm();
};

template<typename Scalar, typename V>
struct Generator<Scalar, Point<V>> {
  using Gradient = typename Generator<Scalar, V>::Gradient;
#if _MSC_FULL_VER == 193'632'532 || \
    _MSC_FULL_VER == 193'632'535 || \
    _MSC_FULL_VER == 193'732'822 || \
    _MSC_FULL_VER == 193'833'135
  using InnerProductFormResult =
      decltype(Generator<Scalar, V>::InnerProductForm());
  static InnerProductFormResult InnerProductForm();
#else
  static decltype(Generator<Scalar, V>::InnerProductForm()) InnerProductForm();
#endif
};

template<typename Scalar, typename S, int s>
FixedMatrix<double, s, s>
Generator<Scalar, FixedVector<S, s>>::InnerProductForm() {
  FixedMatrix<double, s, s> result{};
  for (int i = 0; i < s; ++i) {
    result(i, i) = 1;
  }
  return result;
}

template<typename Scalar, typename S, typename F>
SymmetricBilinearForm<double, F, Vector>
Generator<Scalar, Vector<S, F>>::InnerProductForm() {
  return geometry::_symmetric_bilinear_form::InnerProductForm<F, Vector>();
}

template<typename Scalar, typename V>
#if _MSC_FULL_VER == 193'632'532 || \
    _MSC_FULL_VER == 193'632'535 || \
    _MSC_FULL_VER == 193'732'822 || \
    _MSC_FULL_VER == 193'833'135
typename Generator<Scalar, Point<V>>::InnerProductFormResult
#else
decltype(Generator<Scalar, V>::InnerProductForm())
#endif
Generator<Scalar, Point<V>>::InnerProductForm() {
  return Generator<Scalar, V>::InnerProductForm();
}

// The line search follows [NW06], algorithms 3.5 and 3.6, which guarantee that
// the chosen step obeys the strong Wolfe conditions.

constexpr double c‚ÇÅ = 1e-4;
constexpr double c‚ÇÇ = 0.9;
constexpr double Œ±_multiplier = 2;
constexpr double hermite2_tolerance = 0.01;

template<typename Scalar, typename Argument>
double Zoom(double Œ±_lo,
            double Œ±_hi,
            Scalar œï_Œ±_lo,
            Scalar œï_Œ±_hi,
            Scalar œï π_Œ±_lo,
            Scalar const& œï_0,
            Scalar const& œï π_0,
            Argument const& x,
            Difference<Argument> const& p,
            Field<Scalar, Argument> const& f,
            GateauxDerivative<Scalar, Argument> const& gateaux_derivative_f,
            bool& satisfies_strong_wolfe_condition) {
  std::optional<Scalar> previous_œï_Œ±‚±º;
  satisfies_strong_wolfe_condition = true;
  LOG(INFO) << "Zoom over: [" << Œ±_lo << " (" << œï_Œ±_lo << "), "
                            << Œ±_hi << " (" << œï_Œ±_hi << ")]";

#if PRINCIPIA_LOG_ZOOM
  {
    Logger logger(TEMP_DIR / "zoom.wl");
    static constexpr int steps = 100;
    auto const Œ±1 = std::min(Œ±_lo, Œ±_hi);
    auto const Œ±2 = std::max(Œ±_lo, Œ±_hi);
    for (int i = 0; i < steps; ++i) {
      auto const Œ± = Œ±1 + 10 * i * (Œ±2 - Œ±1) / (steps - 1);
      auto const f_Œ± = f(x + Œ± * p);
      logger.Append("phi", std::tuple(Œ±, f_Œ±), ExpressInSIUnits);
    }
    logger.Set("alphaLo", Œ±_lo, ExpressInSIUnits);
    logger.Set("alphaHi", Œ±_hi, ExpressInSIUnits);
    logger.Set("phiAlphaLo", œï_Œ±_lo, ExpressInSIUnits);
    logger.Set("phiAlphaHi", œï_Œ±_hi, ExpressInSIUnits);
    logger.Set("phiPrimeAlphaLo", œï π_Œ±_lo, ExpressInSIUnits);
    logger.Set("phi0", œï_0, ExpressInSIUnits);
    logger.Set("phiPrime0", œï π_0, ExpressInSIUnits);
    logger.Set("x", x, ExpressInSIUnits);
    logger.Set("p", p, ExpressInSIUnits);
  }
#endif

  for (;;) {
    // Note that there is no guarantee here that Œ±_lo < Œ±_hi.
    DCHECK_NE(Œ±_lo, Œ±_hi);
    double Œ±‚±º;
    {
      // Quadratic interpolation.  If the extremum is very close to one of the
      // bounds, zooming would proceed very slowly.  Instead, we bisect, which
      // ensures steady zooming.
      double const Œ±_margin = std::abs(Œ±_hi - Œ±_lo) * hermite2_tolerance;
      Hermite2<Scalar, double> const hermite2(
          {Œ±_lo, Œ±_hi}, {œï_Œ±_lo, œï_Œ±_hi}, œï π_Œ±_lo);
      auto const Œ±_extremum = hermite2.FindExtremum();
      if (std::min(Œ±_lo, Œ±_hi) + Œ±_margin < Œ±_extremum &&
          Œ±_extremum < std::max(Œ±_lo, Œ±_hi) - Œ±_margin) {
        Œ±‚±º = Œ±_extremum;
      } else {
        // Fall back to bisection.
        Œ±‚±º = (Œ±_lo + Œ±_hi) / 2;
      }
    }

    auto const œï_Œ±‚±º = f(x + Œ±‚±º * p);
    LOG(INFO) << "  Evaluation at: " << Œ±‚±º << " (" << œï_Œ±‚±º << ")";

    // If the function has become (numerically) constant, we might as well
    // return, even though the value of Œ±‚±º may not satisfy the strong Wolfe
    // condition (it probably doesn't, otherwise we would have exited earlier).
    if (previous_œï_Œ±‚±º.has_value() && previous_œï_Œ±‚±º.value() == œï_Œ±‚±º) {
      LOG(INFO) << "Numerically constant at: " << Œ±‚±º << " (" << œï_Œ±‚±º << ")";
      satisfies_strong_wolfe_condition = false;
      return Œ±‚±º;
    }
    previous_œï_Œ±‚±º = œï_Œ±‚±º;

    if (œï_Œ±‚±º > œï_0 + c‚ÇÅ * Œ±‚±º * œï π_0 || œï_Œ±‚±º >= œï_Œ±_lo) {
      Œ±_hi = Œ±‚±º;
      œï_Œ±_hi = œï_Œ±‚±º;
    } else {
      auto const œï π_Œ±‚±º = gateaux_derivative_f(x + Œ±‚±º * p, p);
      if (Abs(œï π_Œ±‚±º) <= -c‚ÇÇ * œï π_0) {
        return Œ±‚±º;
      }
      if (œï π_Œ±‚±º * (Œ±_hi - Œ±_lo) >= Scalar{}) {
        Œ±_hi = Œ±_lo;
        œï_Œ±_hi = œï_Œ±_lo;
      }
      Œ±_lo = Œ±‚±º;
      œï_Œ±_lo = œï_Œ±‚±º;
      œï π_Œ±_lo = œï π_Œ±‚±º;
    }
  }
}

template<typename Scalar, typename Argument>
double LineSearch(
    Argument const& x,
    Difference<Argument> const& p,
    Gradient<Scalar, Argument> const& grad_f_x,
    Field<Scalar, Argument> const& f,
    GateauxDerivative<Scalar, Argument> const& gateaux_derivative_f,
    bool& satisfies_strong_wolfe_condition) {
  auto const œï_0 = f(x);
  auto const œï π_0 = InnerProduct(grad_f_x, p);
  double Œ±·µ¢‚Çã‚ÇÅ = 0;  // Œ±‚ÇÄ.
  double Œ±·µ¢ = 1;    // Œ±‚ÇÅ.
  Scalar œï_Œ±·µ¢‚Çã‚ÇÅ = œï_0;
  Scalar œï π_Œ±·µ¢‚Çã‚ÇÅ = œï π_0;
  satisfies_strong_wolfe_condition = true;
  for (;;) {
    auto const œï_Œ±·µ¢ = f(x + Œ±·µ¢ * p);
    // For i = 1 the second condition implies the first, so it has no effect on
    // the disjuntion (thus, the test on i in [NW06] is unnecessary).
    if (œï_Œ±·µ¢ > œï_0 + c‚ÇÅ * Œ±·µ¢ * œï π_0 || œï_Œ±·µ¢ >= œï_Œ±·µ¢‚Çã‚ÇÅ) {
      return Zoom(Œ±·µ¢‚Çã‚ÇÅ, Œ±·µ¢,
                  œï_Œ±·µ¢‚Çã‚ÇÅ, œï_Œ±·µ¢,
                  œï π_Œ±·µ¢‚Çã‚ÇÅ,
                  œï_0, œï π_0,
                  x, p, f, gateaux_derivative_f,
                  satisfies_strong_wolfe_condition);
    }
    auto const œï π_Œ±·µ¢ = gateaux_derivative_f(x + Œ±·µ¢ * p, p);
    if (Abs(œï π_Œ±·µ¢) <= -c‚ÇÇ * œï π_0) {
      return Œ±·µ¢;
    }
    if (œï π_Œ±·µ¢ >= Scalar{}) {
      return Zoom(Œ±·µ¢, Œ±·µ¢‚Çã‚ÇÅ,
                  œï_Œ±·µ¢, œï_Œ±·µ¢‚Çã‚ÇÅ,
                  œï π_Œ±·µ¢,
                  œï_0, œï π_0,
                  x, p, f, gateaux_derivative_f,
                  satisfies_strong_wolfe_condition);
    }

    // We don't have a maximum value of Œ± so we blindly increase it until the
    // conditions are met.
    Œ±·µ¢ *= Œ±_multiplier;
  }
  return Œ±·µ¢;
}

template<typename Scalar, typename Argument>
absl::StatusOr<Argument> BroydenFletcherGoldfarbShanno(
    Argument const& start_argument,
    Field<Scalar, Argument> const& f,
    Field<Gradient<Scalar, Argument>, Argument> const& grad_f,
    typename Hilbert<Difference<Argument>>::NormType const& tolerance,
    typename Hilbert<Difference<Argument>>::NormType const& radius,
    std::optional<typename Hilbert<Difference<Argument>>::NormType> const&
        first_step) {
  GateauxDerivative<Scalar, Argument> const gateaux_derivative_f =
      [&grad_f](Argument const& argument,
                Difference<Argument> const& direction) {
        return InnerProduct(grad_f(argument), direction);
      };
  return BroydenFletcherGoldfarbShanno(start_argument,
                                       f,
                                       grad_f,
                                       gateaux_derivative_f,
                                       tolerance,
                                       radius,
                                       first_step);
}

// The implementation of BFGS follows [NW06], algorithm 6.18.
template<typename Scalar, typename Argument>
absl::StatusOr<Argument> BroydenFletcherGoldfarbShanno(
    Argument const& start_argument,
    Field<Scalar, Argument> const& f,
    Field<Gradient<Scalar, Argument>, Argument> const& grad_f,
    GateauxDerivative<Scalar, Argument> const& gateaux_derivative_f,
    typename Hilbert<Difference<Argument>>::NormType const& tolerance,
    typename Hilbert<Difference<Argument>>::NormType const& radius,
    std::optional<typename Hilbert<Difference<Argument>>::NormType> const&
        first_step) {
  bool satisfies_strong_wolfe_condition;

  // The first step uses vanilla steepest descent.
  auto const x‚ÇÄ = start_argument;
  auto const grad_f_x‚ÇÄ = grad_f(x‚ÇÄ);

  LOG(INFO) << "Starting from: " << x‚ÇÄ;
  if (grad_f_x‚ÇÄ == Gradient<Scalar, Argument>{}) {
    LOG(INFO) << "Vanishing gradient at: " << x‚ÇÄ;
    return x‚ÇÄ;
  }

  Difference<Argument> const p‚ÇÄ =
      -Normalize(grad_f_x‚ÇÄ) * first_step.value_or(tolerance);

  double const Œ±‚ÇÄ = LineSearch(x‚ÇÄ, p‚ÇÄ, grad_f_x‚ÇÄ, f, gateaux_derivative_f,
                               satisfies_strong_wolfe_condition);
  auto const x‚ÇÅ = x‚ÇÄ+ Œ±‚ÇÄ * p‚ÇÄ;
  if (!satisfies_strong_wolfe_condition) {
    LOG(INFO) << "Doesn't satisfy the strong Wolfe condition at: " << x‚ÇÅ;
    return x‚ÇÅ;
  }

  // Special computation of H‚ÇÄ using (6.20).
  auto const grad_f_x‚ÇÅ = grad_f(x‚ÇÅ);
  Difference<Argument> const s‚ÇÄ = x‚ÇÅ - x‚ÇÄ;
  auto const y‚ÇÄ = grad_f_x‚ÇÅ - grad_f_x‚ÇÄ;
  auto const H‚ÇÄ = InnerProduct(s‚ÇÄ, y‚ÇÄ) *
                  Generator<Scalar, Argument>::InnerProductForm() /
                  y‚ÇÄ.Norm¬≤();

  auto x‚Çñ = x‚ÇÅ;
  auto grad_f_x‚Çñ = grad_f_x‚ÇÅ;
  auto H‚Çñ = H‚ÇÄ;
  for (;;) {
    LOG(INFO) << "Iterating from: " << x‚Çñ;
    RETURN_IF_STOPPED;
    if ((x‚Çñ - x‚ÇÄ).Norm() > radius) {
      LOG(INFO) << "No minimum within search radius at: " << x‚Çñ;
      return absl::Status(termination_condition::NoMinimum, "No minimum found");
    }
    Difference<Argument> const p‚Çñ = -H‚Çñ * grad_f_x‚Çñ;
    if (p‚Çñ.Norm() <= tolerance) {
      LOG(INFO) << "Below tolerance at: " << x‚Çñ
              << ", displacement: " << p‚Çñ.Norm();
      return x‚Çñ;
    }
    double const Œ±‚Çñ = LineSearch(x‚Çñ, p‚Çñ, grad_f_x‚Çñ, f, gateaux_derivative_f,
                                 satisfies_strong_wolfe_condition);
    auto const x‚Çñ‚Çä‚ÇÅ = x‚Çñ + Œ±‚Çñ * p‚Çñ;
    auto const grad_f_x‚Çñ‚Çä‚ÇÅ = grad_f(x‚Çñ‚Çä‚ÇÅ);
    auto const s‚Çñ = x‚Çñ‚Çä‚ÇÅ - x‚Çñ;
    auto const y‚Çñ = grad_f_x‚Çñ‚Çä‚ÇÅ - grad_f_x‚Çñ;
    auto const s‚Çñy‚Çñ = InnerProduct(s‚Çñ, y‚Çñ);

    // If we can't make progress, e.g., because Œ±‚Çñ is too small, give up.
    if (!satisfies_strong_wolfe_condition) {
      LOG(INFO) << "Doesn't satisfy the strong Wolfe condition at: " << x‚Çñ‚Çä‚ÇÅ;
      return x‚Çñ‚Çä‚ÇÅ;
    } else if (s‚Çñy‚Çñ == Scalar{}) {  // NOLINT
      LOG(INFO) << "No progress at: " << x‚Çñ‚Çä‚ÇÅ
              << " (s: " << s‚Çñ << ", y: " << y‚Çñ << ")";
      return x‚Çñ‚Çä‚ÇÅ;
    }

    // The formula (6.17) from [NW06] is inconvenient because it uses external
    // products.  Elementary transformations yield the formula below.
    auto const œÅ = 1 / s‚Çñy‚Çñ;
    auto const H‚Çñ‚Çä‚ÇÅ =
        H‚Çñ + œÅ * ((œÅ * H‚Çñ(y‚Çñ, y‚Çñ) + 1) * SymmetricSquare(s‚Çñ) -
                  2 * SymmetricProduct(H‚Çñ * y‚Çñ, s‚Çñ));

    x‚Çñ = x‚Çñ‚Çä‚ÇÅ;
    grad_f_x‚Çñ = grad_f_x‚Çñ‚Çä‚ÇÅ;
    H‚Çñ = H‚Çñ‚Çä‚ÇÅ;
  }
}

}  // namespace internal
}  // namespace _gradient_descent
}  // namespace numerics
}  // namespace principia
